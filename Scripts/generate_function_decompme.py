from contextlib import suppress
import json
from pathlib import Path
import re
import subprocess
import sys
import urllib.error
import urllib.request
from datetime import datetime
import os
import stat

REPO_DIR = Path(__file__).parent.parent
SCRIPTS_DIR = REPO_DIR / "Scripts"
CONFIG_DIR = REPO_DIR / "config"
RESOURCES_DIR = REPO_DIR / "resources"
INCLUDE_PATHS = [REPO_DIR / "Source"]

def cpp_expand(file, path, matched_files):
    out = ""
    for line in file:
        val = re.match(r'#include "(.*)"', line)
        if val:
            out += cpp_expand_path(val.group(1), matched_files)
        elif re.match(r"#pragma once", line):
            matched_files.add(path)
        else:
            out += line
    return out


def cpp_expand_path(path, matched_files):
    # i18n.hpp is auto-generated by converting i18n.tpl to shift-jis. This might
    # cause issues, so let's just take the original utf8-encoded template file.
    if path == "i18n.hpp":
        path = "i18n.tpl"

    if path in matched_files:
        return ""

    for include_path in INCLUDE_PATHS:
        with suppress(FileNotFoundError):
            with open(include_path / path) as f:
                return cpp_expand(f, path, matched_files)

    raise Exception("No include found for " + path + " in " + str(INCLUDE_PATHS))

def try_download_satsuki():
    if sys.platform == "win32":
        url = "https://github.com/happyhavoc/satsuki/releases/download/v0.1.2/x86_64-windows-satsuki.exe"
        satsuki_name = "satsuki.exe"
    elif sys.platform == "linux":
        url = "https://github.com/happyhavoc/satsuki/releases/download/v0.1.2/x86_64-linux-satsuki"
        satsuki_name = "satsuki"
    else:
        print(f"Unsupported platform: {sys.platform}")
        return

    if (SCRIPTS_DIR / satsuki_name).exists():
        print("Skipping satsuki download")
        return

    print(f"Downloading {satsuki_name}...")
    urllib.request.urlretrieve(url, SCRIPTS_DIR / satsuki_name)
    mode = os.stat(SCRIPTS_DIR / satsuki_name).st_mode | stat.S_IXUSR
    os.chmod(SCRIPTS_DIR / satsuki_name, mode)

def main():
    try_download_satsuki()

    if not (SCRIPTS_DIR / "10.5.exe").exists():
        print(f"gta2 executable '10.5.exe' not found! Move '10.5.exe' to {str(SCRIPTS_DIR / "10.5.exe")} and try again!")
        sys.exit(1)

    asm = subprocess.check_output(
        [
            str(SCRIPTS_DIR / "satsuki"),
            "--mapping-file-csv",
            str(SCRIPTS_DIR / "mapping.csv"),
            "disassemble",
            "--att",
            "--force-address-zero",
            "--resolve-names",
            SCRIPTS_DIR / "10.5.exe",
            sys.argv[1], # function name
        ]
    ).decode("utf8")
    asm = ".att_syntax\n" + asm
    print(asm)

    #ctx = cpp_expand_path("Game_0x40.hpp", set())
    #print(ctx)

    '''
    req = urllib.request.Request(
        "https://decomp.me/api/scratch",
        headers={
            "Content-Type": "application/json",
        },
        data=json.dumps(
            {
                "compiler": "msvc7.0",
                "compiler_flags": "/MT /EHsc /G5 /Gs /GS /Od /Oi /Ob1 /Op /TP",
                "context": ctx,
                "diff_flags": [],
                "diff_label": sys.argv[1],
                "libraries": [
                    {"name": "directx", "version": "8.0"},
                ],
                "platform": "win32",
                "preset": 111,
                "target_asm": asm,
            }
        ).encode("utf8"),
    )

    try:
        with urllib.request.urlopen(req) as res:
            out_data = json.load(res)
    except urllib.error.HTTPError as err:
        print(json.load(err.fp))
        raise

    print(
        "https://decomp.me/scratch/"
        + out_data["slug"]
        + "/claim?token="
        + out_data["claim_token"]
    )
    '''

if __name__ == "__main__":
    main()
